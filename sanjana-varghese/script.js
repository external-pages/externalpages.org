window.addEventListener(
    "keydown",
    function(e) {
        // space and arrow keys
        if ([32, 37, 38, 39, 40].indexOf(e.keyCode) > -1) {
            e.preventDefault();
        }
    },
    false
);

let maze = [
    [
        0,
        0,
        1,
        0,
        0,
        1,
        0,
        0,
        0,
        1,
        0,
        0,
        0,
        1,
        0,
        0,
        0,
        1,
        0,
        0,
        1,
        0,
        0,
        1,
        1,
        0,
        0,
        3,
        0,
        1,
        0,
        0,
        1,
        1,
        0,
        0,
        3,
        0,
        1,
        0,
        1,
        0,
        0,
        1,
        1,
        0,
        0,
        3,
        0
    ],
    [
        0,
        0,
        1,
        0,
        0,
        1,
        0,
        0,
        0,
        1,
        0,
        0,
        0,
        1,
        0,
        0,
        0,
        1,
        0,
        0,
        1,
        0,
        0,
        1,
        1,
        0,
        0,
        3,
        0,
        1,
        0,
        0,
        1,
        1,
        0,
        0,
        3,
        0,
        1,
        0,
        1,
        0,
        0,
        1,
        1,
        0,
        0,
        3,
        0
    ],
    [
        0,
        0,
        1,
        0,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        0,
        0,
        1,
        0,
        0,
        0,
        1,
        0,
        0,
        1,
        0,
        0,
        1,
        1,
        0,
        0,
        3,
        0,
        1,
        0,
        0,
        1,
        1,
        0,
        0,
        3,
        0,
        1,
        0,
        1,
        0,
        0,
        1,
        1,
        0,
        0,
        3,
        0,
        1
    ],
    [
        0,
        0,
        0,
        0,
        0,
        1,
        0,
        1,
        1,
        1,
        0,
        0,
        1,
        1,
        0,
        0,
        0,
        1,
        0,
        0,
        1,
        0,
        0,
        1,
        1,
        0,
        0,
        3,
        0,
        1,
        0,
        0,
        1,
        1,
        0,
        0,
        3,
        0,
        1,
        0,
        1,
        0,
        0,
        1,
        1,
        0,
        0,
        3,
        0,
        1
    ],
    [
        0,
        0,
        0,
        0,
        1,
        1,
        0,
        0,
        0,
        1,
        0,
        0,
        0,
        1,
        0,
        0,
        0,
        1,
        0,
        0,
        1,
        0,
        0,
        1,
        1,
        0,
        0,
        3,
        0,
        1,
        0,
        0,
        1,
        1,
        0,
        0,
        3,
        0,
        1,
        0,
        1,
        0,
        0,
        1,
        1,
        0,
        0,
        3,
        0,
        1
    ],
    [
        1,
        1,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        1,
        1,
        0,
        0,
        1,
        1,
        0,
        0,
        1,
        0,
        0,
        1,
        0,
        0,
        1,
        1,
        0,
        0,
        3,
        0,
        1,
        0,
        0,
        1,
        1,
        0,
        0,
        3,
        0,
        1,
        0,
        1,
        0,
        0,
        1,
        1,
        0,
        0,
        3,
        0,
        1
    ],
    [
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        1,
        0,
        0,
        1,
        0,
        0,
        1,
        1,
        0,
        0,
        3,
        0,
        1,
        0,
        0,
        1,
        1,
        0,
        0,
        3,
        0,
        1,
        0,
        1,
        0,
        0,
        1,
        1,
        0,
        0,
        3,
        0,
        1
    ],
    [
        0,
        1,
        0,
        1,
        0,
        1,
        1,
        1,
        1,
        1,
        0,
        0,
        1,
        1,
        0,
        0,
        0,
        1,
        0,
        0,
        1,
        0,
        0,
        1,
        1,
        0,
        0,
        3,
        0,
        1,
        0,
        0,
        1,
        1,
        0,
        0,
        3,
        0,
        1,
        0,
        1,
        0,
        0,
        1,
        1,
        0,
        0,
        3,
        0,
        1
    ],
    [
        0,
        1,
        0,
        0,
        0,
        1,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        1,
        0,
        0,
        1,
        0,
        0,
        1,
        1,
        0,
        0,
        3,
        0,
        1,
        0,
        0,
        1,
        1,
        0,
        0,
        3,
        0,
        1,
        0,
        1,
        0,
        0,
        1,
        1,
        0,
        0,
        3,
        0,
        1
    ],
    [
        0,
        1,
        0,
        0,
        0,
        0,
        0,
        0,
        1,
        0,
        1,
        1,
        1,
        0,
        1,
        1,
        0,
        1,
        0,
        0,
        1,
        0,
        0,
        1,
        1,
        0,
        0,
        3,
        0,
        1,
        0,
        0,
        1,
        1,
        0,
        0,
        3,
        0,
        1,
        0,
        1,
        0,
        0,
        1,
        1,
        0,
        0,
        3,
        0,
        1
    ],
    [
        0,
        1,
        0,
        1,
        1,
        1,
        1,
        0,
        1,
        0,
        0,
        0,
        1,
        0,
        0,
        0,
        0,
        1,
        0,
        0,
        1,
        0,
        0,
        1,
        1,
        0,
        0,
        3,
        0,
        1,
        0,
        0,
        1,
        1,
        0,
        0,
        3,
        0,
        1,
        0,
        1,
        0,
        0,
        1,
        1,
        0,
        0,
        3,
        0,
        1
    ],
    [
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        1,
        0,
        0,
        3,
        1,
        0,
        0,
        3,
        0,
        1,
        0,
        0,
        1,
        0,
        0,
        1,
        1,
        0,
        0,
        3,
        0,
        1,
        0,
        0,
        1,
        1,
        0,
        0,
        3,
        0,
        1,
        0,
        1,
        0,
        0,
        1,
        1,
        0,
        0,
        3,
        0,
        1
    ],
    [
        0,
        0,
        1,
        0,
        0,
        1,
        0,
        0,
        0,
        1,
        0,
        0,
        0,
        1,
        0,
        0,
        0,
        1,
        0,
        0,
        1,
        0,
        0,
        1,
        1,
        0,
        0,
        3,
        0,
        1,
        0,
        0,
        1,
        1,
        0,
        0,
        3,
        0,
        1,
        0,
        1,
        0,
        0,
        1,
        1,
        0,
        0,
        3,
        0,
        1
    ],
    [
        0,
        0,
        1,
        0,
        0,
        1,
        0,
        0,
        0,
        1,
        0,
        0,
        0,
        1,
        0,
        0,
        0,
        1,
        0,
        0,
        1,
        0,
        0,
        1,
        1,
        0,
        0,
        3,
        0,
        1,
        0,
        0,
        1,
        1,
        0,
        0,
        3,
        0,
        1,
        0,
        1,
        0,
        0,
        1,
        1,
        0,
        0,
        3,
        0,
        1
    ],
    [
        0,
        0,
        1,
        0,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        0,
        0,
        1,
        0,
        0,
        0,
        1,
        0,
        0,
        1,
        0,
        0,
        1,
        1,
        0,
        0,
        3,
        0,
        1,
        0,
        0,
        1,
        1,
        0,
        0,
        3,
        0,
        1,
        0,
        1,
        0,
        0,
        1,
        1,
        0,
        0,
        3,
        0,
        1
    ],
    [
        0,
        0,
        0,
        0,
        0,
        1,
        0,
        1,
        1,
        1,
        0,
        0,
        1,
        1,
        0,
        0,
        0,
        1,
        0,
        0,
        1,
        0,
        0,
        1,
        1,
        0,
        0,
        3,
        0,
        1,
        0,
        0,
        1,
        1,
        0,
        0,
        3,
        0,
        1,
        0,
        1,
        0,
        0,
        1,
        1,
        0,
        0,
        3,
        0,
        1
    ],
    [
        0,
        0,
        0,
        0,
        1,
        1,
        0,
        0,
        0,
        1,
        0,
        0,
        0,
        1,
        0,
        0,
        0,
        1,
        0,
        0,
        1,
        0,
        0,
        1,
        1,
        0,
        0,
        3,
        0,
        1,
        0,
        0,
        1,
        1,
        0,
        0,
        3,
        0,
        1,
        0,
        1,
        0,
        0,
        1,
        1,
        0,
        0,
        3,
        0,
        1
    ],
    [
        1,
        1,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        1,
        1,
        0,
        0,
        1,
        1,
        0,
        0,
        1,
        0,
        0,
        1,
        0,
        0,
        1,
        1,
        0,
        0,
        3,
        0,
        1,
        0,
        0,
        1,
        1,
        0,
        0,
        3,
        0,
        1,
        0,
        1,
        0,
        0,
        1,
        1,
        0,
        0,
        3,
        0,
        1
    ],
    [
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        1,
        0,
        0,
        1,
        0,
        0,
        1,
        1,
        0,
        0,
        3,
        0,
        1,
        0,
        0,
        1,
        1,
        0,
        0,
        3,
        0,
        1,
        0,
        1,
        0,
        0,
        1,
        1,
        0,
        0,
        3,
        0,
        1
    ],
    [
        0,
        1,
        0,
        1,
        0,
        1,
        1,
        1,
        1,
        1,
        0,
        0,
        1,
        1,
        0,
        0,
        0,
        1,
        0,
        0,
        1,
        0,
        0,
        1,
        1,
        0,
        0,
        3,
        0,
        1,
        0,
        0,
        1,
        1,
        0,
        0,
        3,
        0,
        1,
        0,
        1,
        0,
        0,
        1,
        1,
        0,
        0,
        3,
        0,
        1
    ],
    [
        0,
        1,
        0,
        0,
        0,
        1,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        1,
        0,
        0,
        1,
        0,
        0,
        1,
        1,
        0,
        0,
        3,
        0,
        1,
        0,
        0,
        1,
        1,
        0,
        0,
        3,
        0,
        1,
        0,
        1,
        0,
        0,
        1,
        1,
        0,
        0,
        3,
        0,
        1
    ],
    [
        0,
        1,
        0,
        0,
        0,
        0,
        0,
        0,
        1,
        0,
        1,
        1,
        1,
        0,
        1,
        1,
        0,
        1,
        0,
        0,
        1,
        0,
        0,
        1,
        1,
        0,
        0,
        3,
        0,
        1,
        0,
        0,
        1,
        1,
        0,
        0,
        3,
        0,
        1,
        0,
        1,
        0,
        0,
        1,
        1,
        0,
        0,
        3,
        0,
        1
    ],
    [
        0,
        1,
        0,
        1,
        1,
        1,
        1,
        0,
        1,
        0,
        0,
        0,
        1,
        0,
        0,
        0,
        0,
        1,
        0,
        0,
        1,
        0,
        0,
        1,
        1,
        0,
        0,
        3,
        0,
        1,
        0,
        0,
        1,
        1,
        0,
        0,
        3,
        0,
        1,
        0,
        1,
        0,
        0,
        1,
        1,
        0,
        0,
        3,
        0,
        1
    ],
    [
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        1,
        0,
        0,
        3,
        1,
        0,
        0,
        3,
        0,
        1,
        0,
        0,
        1,
        0,
        0,
        1,
        1,
        0,
        0,
        3,
        0,
        1,
        0,
        0,
        1,
        1,
        0,
        0,
        3,
        0,
        1,
        0,
        0,
        1,
        1,
        0,
        0,
        3,
        0,
        1,
        0,
        1
    ]
];

let player = [0, 0];
let bag = 0;

const ROWS = 24;
const COLS = 48;

const EMPTY = 0;
const WALL = 1;
const PLAYER = 2;
const EXIT = 3;
const EXIT_READY = 6;
const DIAMOND = 4;
const DIAMOND_COUNT = 200;

const DOWN = 40;
const UP = 38;
const LEFT = 37;
const RIGHT = 39;

window.onload = () => {
    generateDiamond();
    createBoard();
    renderMaze();
};

const generateDiamond = () => {
    let count = 0;

    do {
        let row = Math.floor(Math.random() * ROWS);
        let col = Math.floor(Math.random() * COLS);
        if (
            maze[row][col] === EMPTY &&
            row !== 0 &&
            col !== 0 &&
            row !== ROWS - 1 &&
            col !== COLS - 1
        ) {
            maze[row][col] = DIAMOND;
            count++;
        }
    } while (count !== DIAMOND_COUNT);
};

const createBoard = () => {
    for (let row = 0; row < ROWS; row++) {
        for (let col = 0; col < COLS; col++) {
            const block = document.createElement("div");
            block.id = `id-${col}-${row}`;
            document.querySelector(".board").appendChild(block);
        }
    }
};

const renderMaze = () => {
    if (bag < DIAMOND_COUNT) {
        document.querySelector(".info").textContent = "";
    } else {
        maze[ROWS - 1][COLS - 1] = EXIT_READY;
        document.querySelector(".info").textContent = "";
    }

    for (let row = 0; row < ROWS; row++) {
        for (let col = 0; col < COLS; col++) {
            let itemClass = "";
            switch (maze[row][col]) {
                case PLAYER:
                    itemClass = "player";
                    break;
                // case WALL:
                //     itemClass = "wall";
                //     break;
                case PLAYER:
                    itemClass = "human";
                    break;
                case EXIT:
                    itemClass = "exit";
                    break;
                case EXIT_READY:
                    itemClass = "exit show";
                    break;
                case DIAMOND:
                    itemClass = "diamond";
                    break;
                default:
                    itemClass = "empty";
            }
            const id = `#id-${col}-${row}`;

            document.querySelector(id).className = `block ${itemClass}`;
        }
    }
    const id = `#id-${player[1]}-${player[0]}`;
    if (
        !(
            bag === DIAMOND_COUNT &&
            player[1] === COLS - 1 &&
            player[0] === ROWS - 1
        )
    ) {
        document.querySelector(id).className = "block player";
    } else {
        document.querySelector(id).className = "block player bye";
        document.querySelector(".info").textContent = "bye!";
    }

    document.querySelector(
        ".diamond-count"
    ).textContent = `${bag} / ${DIAMOND_COUNT}`;
};

window.onkeydown = event => {
    switch (event.keyCode) {
        case DOWN:
            direction = DOWN;
            break;
        case UP:
            direction = UP;
            break;
        case LEFT:
            direction = LEFT;
            break;
        case RIGHT:
            direction = RIGHT;
            break;
        default:
            direction = 0;
    }

    if (direction !== 0) {
        changePlayerPos(direction);
    }
};

const changePlayerPos = direction => {
    // set player position
    let x = 0;
    let y = 0;
    let [dy, dx] = [0, 0];

    // @ana this needs to not be a switch so we can apply if/else statements
    switch (direction) {
        case UP:
            dy = -1;
            break;
        case RIGHT:
            dx = 1;
            break;
        case LEFT:
            dx = -1;
            break;
        case DOWN:
            dy = 1;
            break;
        default:
            return state;
    }

    // the used links
    var links = ["open/opened.html"];

    openStuff = function() {
        window.open(links);
    };

    // update player position
    // also note: i think these are backwards but i'm not sure how these are affecting this
    x = player[1] + dx;
    y = player[0] + dy;
    player = [y, x];

    // if (x >= 0 && x < COLS && y >= 0 && y < ROWS && maze[y][x] !== WALL) {

    if (maze[y][x] === DIAMOND) {
        maze[y][x] = EMPTY;
        bag++;
        openStuff();
    }

    renderMaze();
};
